//*********************************************************************************
//*
//* Ruleset f√ºr Senec V3 DUO, sollte aber bei allen mit lala.cgi von Senec gehen
//* 18.2.2025
//*



//*********************************************************************************
//*  Simulation von Preis√§nderungen durch Tibber
//* Regel, um Werte des Sliders zu √ºbersetzen. Feuert zuerst!
rule "Convert Simulated Price"
when
    Item Simulated_Price_Raw changed
then
    val rawValue = Simulated_Price_Raw.state as Number
    val realValue = rawValue / 1000.0  // Umrechnung in ‚Ç¨/kWh
    logInfo("Debug_Price", "üîÑ Converted raw value: " + rawValue + " ‚Üí " + realValue + " ‚Ç¨/kWh")
    Simulated_Price.postUpdate(realValue)
end

//* Wenn Simulated Price changed then check for debug and update Tibber Current
rule "Debug: Override Tibber Price with Simulated Price"
when
    Item Simulated_Price changed
then
    if (Price_Debug_Mode.state == ON) {
        logInfo("Debug_Price", "üêû Debug Mode is ON - Overriding real Tibber price with simulated price.")
        Tibber_current_total.postUpdate(Simulated_Price.state as Number)
    } else {
        logInfo("Debug_Price", "‚ÑπÔ∏è Debug Mode is OFF - No override applied.")
    }
end

//* Regel, um Werte des Sliders zu √ºbersetzen. Feuert zuerst!
rule "Convert Simulated Price"
when
    Item Simulated_Price_Raw changed
then
    val rawValue = Simulated_Price_Raw.state as Number
    val realValue = rawValue / 1000.0  // Umrechnung in ‚Ç¨/kWh
    logInfo("Simulation", "üîÑ Converted raw value: " + rawValue + " ‚Üí " + realValue + " ‚Ç¨/kWh")
    Simulated_Price.postUpdate(realValue)
end

//*  Ende von Simulation von Preis√§nderungen durch Tibber
//*********************************************************************************


rule "Control Senec Forced Charging"   //* Working
when
    Item Senec_Forced_Charging changed
then
    logInfo("Senec_Control", "üîÑ Evaluating forced charging state...")

    var String command = ""

    if (Senec_Forced_Charging.state == ON) {
        logInfo("Senec_Control", "‚ö° Forced Charging is ON ‚Üí Forcing battery charge.")
        //curl -k -X POST "https://192.168.1.56/lala.cgi" -H "Content-Type: application/json" -d '{"ENERGY":{"SAFE_CHARGE_FORCE":"u8_01","SAFE_CHARGE_PROHIBIT":"","SAFE_CHARGE_RUNNING":"","LI_STORAGE_MODE_START":"","LI_STORAGE_MODE_STOP":"","LI_STORAGE_MODE_RUNNING":""}}'

        command = "/usr/bin/curl -k -X POST \"https://192.168.1.56/lala.cgi\" -H \"Content-Type: application/json\" -d '{\"ENERGY\":{\"SAFE_CHARGE_FORCE\":\"u8_01\",\"SAFE_CHARGE_PROHIBIT\":\"\",\"SAFE_CHARGE_RUNNING\":\"\",\"LI_STORAGE_MODE_START\":\"\",\"LI_STORAGE_MODE_STOP\":\"\",\"LI_STORAGE_MODE_RUNNING\":\"\"}}'"
    }
    else {
        logInfo("Senec_Control", "üõë Forced Charging is OFF ‚Üí Stopping forced charging.")
        //curl -k -X POST "https://192.168.1.56/lala.cgi" -H "Content-Type: application/json" -d '{"ENERGY":{"SAFE_CHARGE_FORCE":"","SAFE_CHARGE_PROHIBIT":"u8_01","SAFE_CHARGE_RUNNING":"","LI_STORAGE_MODE_START":"","LI_STORAGE_MODE_STOP":"","LI_STORAGE_MODE_RUNNING":""}}'
        command = "/usr/bin/curl -k -X POST \"https://192.168.1.56/lala.cgi\" -H \"Content-Type: application/json\" -d '{\"ENERGY\":{\"SAFE_CHARGE_FORCE\":\"\",\"SAFE_CHARGE_PROHIBIT\":\"u8_01\",\"SAFE_CHARGE_RUNNING\":\"\",\"LI_STORAGE_MODE_START\":\"\",\"LI_STORAGE_MODE_STOP\":\"\",\"LI_STORAGE_MODE_RUNNING\":\"\"}}'"
    }
    if (!command.isEmpty) {
        val result = executeCommandLine(Duration.ofSeconds(5), "/bin/bash", "-c", command)
        
        if (result !== null && !result.isEmpty) {
            logInfo("Senec", "üì° Curl Result: " + result)
        } else {
            logWarn("Senec", "‚ö†Ô∏è Curl command returned empty response")
        }
    }
end

rule "Check Scheduled Charging Time" //* working
when
    Time cron "0 * * * * ?" // Jede Minute ausf√ºhren
then
    logInfo("Senec", "‚è≥ Checking scheduled charging time...")

    // NEW: Check if Timed Charging is enabled
    if (Timed_Charging_Enabled.state != ON) {
        logInfo("Senec", "üõë Timed Charging is disabled. Skipping rule execution.")
        return
    }

    val currentTime = now.withSecond(0).withNano(0)

    // Pr√ºfen, ob die Items gesetzt sind, um NullPointer zu vermeiden
    if (DT_Senec_Charge_Start.state == NULL || DT_Senec_Charge_End.state == NULL) {
        logWarn("Senec", "‚ö†Ô∏è Start-/Endzeit nicht gesetzt. Regel wird nicht ausgef√ºhrt.")
        return
    }
    // **NEUE Methode statt getZonedDateTime()**
    val startTime = (DT_Senec_Charge_Start.state as DateTimeType).getInstant().atZone(java.time.ZoneId.systemDefault())
    val endTime = (DT_Senec_Charge_End.state as DateTimeType).getInstant().atZone(java.time.ZoneId.systemDefault())
    // Falls Endzeit vor Startzeit liegt, setze sie auf den n√§chsten Tag
    val adjustedEndTime = if (endTime.isBefore(startTime)) endTime.plusDays(1) else endTime
    // Aktuelle Stunden & Minuten extrahieren
    val currentHour = currentTime.getHour()
    val currentMinute = currentTime.getMinute()
    val startHour = startTime.getHour()
    val startMinute = startTime.getMinute()
    val endHour = adjustedEndTime.getHour()
    val endMinute = adjustedEndTime.getMinute()

    // Debugging-Log
    logInfo("Senec P1", "üîç Checking: StartTime={} | EndTime={} | AdjustedEndTime={} | AutoMode={} | TimeMode={} | CurrentTime={} | Start: {}:{} | End: {}:{} | Now: {}:{}",  
        startTime, endTime, adjustedEndTime, Senec_Auto_Mode.state, Senec_Auto_Time_Mode.state, 
        currentTime, startHour, startMinute, endHour, endMinute, currentHour, currentMinute)

    // Pr√ºfen, ob Automatikmodus aktiviert ist und Zeitsteuerung aktiv ist
    if (Senec_Auto_Mode.state == ON && Senec_Auto_Time_Mode.state == ON) {
        if (currentHour == startHour && currentMinute == startMinute) {
            logInfo("Senec P2", "üîã Exakte Startzeit erreicht - Ladebefehl senden.")
            Senec_Forced_Charging.sendCommand(ON)
        }
        if (currentHour == endHour && currentMinute == endMinute) {
            logInfo("Senec P2", "üîå Exakte Endzeit erreicht - Ladebefehl stoppen.")
            Senec_Forced_Charging.sendCommand(OFF)
        }
    } else {
        logInfo("Senec", "üõë Zeitsteuerung ist deaktiviert. Keine Aktion.")
    }

    logInfo("Senec", "*** Senec CRON fired once a minute - Tests completed")
end

rule "Price-Based Charging" //* working
when
    Item Tibber_current_total changed
then
    logInfo("Senec_Price", "üìä Checking price-based charging...")

    // Store the last price before any exit happens
    val previousLastPrice = if (Last_Tibber_Price.state != NULL) Last_Tibber_Price.state as Number else null
    val newPrice = Tibber_current_total.state as Number

    // Ensure the stored price is updated no matter what
    Last_Tibber_Price.postUpdate(newPrice)

    // Check if Senec_Auto_Mode is enabled
    if (Senec_Auto_Mode.state != ON) {
        logInfo("Senec_Price", "üõë Senec Auto Mode is OFF. Exiting price-based charging rule.")
        return
    }

    // Check if price-based charging is enabled
    if (Price_Charging_Enabled.state != ON) {
        logInfo("Senec_Price", "üõë Price-based charging is disabled. Exiting.")
        return
    }

    // Ensure required values exist
    if (Tibber_current_total.state == NULL || Charging_Threshold_Real.state == NULL) {
        logWarn("Senec_Price", "‚ö†Ô∏è Required values missing. Exiting.")
        return
    }

    val threshold = Charging_Threshold_Real.state as Number
    val lastPrice = if (previousLastPrice != null) previousLastPrice else newPrice  // Fallback to current price if NULL

    logInfo("Senec_Price", "üìâ Current price: " + newPrice + " ‚Ç¨/kWh | Threshold: " + threshold + " ‚Ç¨/kWh | Last price: " + lastPrice + " ‚Ç¨/kWh")

    if (newPrice < threshold && lastPrice >= threshold) {
        logInfo("Senec_Price", "‚úÖ Price dropped below threshold. Starting charging.")
        Senec_Forced_Charging.sendCommand(ON)
    } else if (newPrice > threshold && lastPrice <= threshold) {
        logInfo("Senec_Price", "üîå Price exceeded threshold. Stopping charging.")
        Senec_Forced_Charging.sendCommand(OFF)
    } else {
        logInfo("Senec_Price", "‚ÑπÔ∏è No action needed. Price is stable.")
    }
end



rule "Convert Charging Threshold"
when
    Item Charging_Threshold_Raw changed
then
    val rawValue = Charging_Threshold_Raw.state as Number
    val realValue = rawValue / 1000.0  // Convert integer to decimal (‚Ç¨/kWh)
    
    logInfo("Charging", "üîÑ Converted raw value: " + rawValue + " ‚Üí " + realValue + " ‚Ç¨/kWh")
    
    Charging_Threshold_Real.postUpdate(realValue)
end

rule "Disable Price Charging when Time Mode is Enabled"
when
    Item Senec_Auto_Time_Mode changed to ON
then
    if (Price_Charging_Enabled.state == ON) {
        logInfo("Senec_Mode", "üîÑ Time-based charging enabled. Disabling price-based charging to avoid conflicts.")
        Price_Charging_Enabled.sendCommand(OFF)
    }
end

rule "Disable Time Mode when Price Charging is Enabled"
when
    Item Price_Charging_Enabled changed to ON
then
    if (Senec_Auto_Time_Mode.state == ON) {
        logInfo("Senec_Mode", "üîÑ Price-based charging enabled. Disabling time-based charging to avoid conflicts.")
        Senec_Auto_Time_Mode.sendCommand(OFF)
    }
end